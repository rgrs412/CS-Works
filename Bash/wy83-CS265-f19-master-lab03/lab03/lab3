Q1:
The output is "true". Since the [[ 13 < 2 ]] test is  
"True if STRING1 sorts before STRING2 lexicographically."
In this case, the string "13" sorts before the string "2" lexicographically.

Q2:
The output is "All we have to decide is what to do with
the chocolate that is given us..."

Since the exit status of "if grep chocolate mySettings &>/dev/null"
is true or 0 (a line is selected), the echo command was able to
execute and print out the output.

&>/dev/null prevented the display of the output from grep

Q3: 
The output is "2".

According to "help let", "Evaluation is done in
fixed-width integers with no check for overflow".
I assume this means that the let command (()) or bash 
does not support floating-point arithmetic, and does not include
decimals in numeric evaluations.

Q4:
The output is "0".

According to "help let", 
"Exit Status:
If the last ARG evaluates to 0, let returns 1; let returns 0 otherwise."

The exit status for (( 27 % 2 == 1 )) is 0, because 
the argument, 27 % 2 == 1, does not evaluates to 0.

Q5:
The output is the following:
5 12 13
5  13

The output of ( x=12 ; echo "5 $x 13" ) and echo "5 $x 13" were 
different, because the statements in ( x=12 ; echo "5 $x 13" ) is 
executed in a subshell. "Changes made to the evironment in a subshell do not
persist upon exit"(bashIntro lecture slides). Therefore, the x=12 
assignment will not persist in the current or parent shell, and
echo $x will not display "12".

Q6:
The output is the following:
Item
Another 
item

Q7:
The output is the following:
Item
Another item

Q8:
The output is the following:
Item
Another item

